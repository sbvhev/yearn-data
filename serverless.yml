service: yearn-data

# Create an optimized package for our functions
package:
  individually: true
  excludeDevDependencies: true

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-domain-manager # Use vaults.finance
  - serverless-api-gateway-caching # Cache api responses

custom:
  webpack:
    webpackConfig: webpack.config.js
    includeModules: true
  customDomain:
    domainName: ${self:custom.${opt:stage, self:provider.stage}.domain}
    createRoute53Record: true
    basePath: ""
    stage: ${opt:stage, self:provider.stage}
  apiGatewayCaching:
    enabled: true
    ttlInSeconds: 600
  experimental:
    domain: experimental.vaults.finance
    rate: rate(1 day)
  dev:
    domain: dev.vaults.finance
    rate: rate(10 minutes)
  prod:
    domain: vaults.finance
    rate: rate(10 minutes)

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  lambdaHashingVersion: 20201221
  logRetentionInDays: 3
  apiGateway:
    shouldStartNameWithService: true
  environment:
    DDB_VAULTS_CACHE: ${self:service}-${opt:stage, self:provider.stage}-VaultsCache
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DDB_VAULTS_CACHE}"

functions:
  index:
    handler: endpoints/index.handler
    events:
      - http:
          path: /
          method: get
          caching:
            enabled: true
  vaults:
    handler: endpoints/vaults/index.handler
    events:
      - http:
          path: /vaults
          method: get
          caching:
            enabled: true

  vaultByAddress:
    handler: endpoints/vaults/address/index.handler
    events:
      - http:
          path: /vaults/{address}
          method: get
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.path.address

  integrations-coingecko-pools:
    handler: endpoints/integrations/coingecko/pools.handler
    events:
      - http:
          path: integrations/coingecko/pools
          method: get
          caching:
            enabled: true

  job-vaults:
    timeout: 300
    handler: jobs/vaults.handler
    events:
      - schedule:
          rate: ${self:custom.${opt:stage, self:provider.stage}.rate}

resources:
  Resources:
    VaultsCache:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: address
            AttributeType: S
        KeySchema:
          - AttributeName: address
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.DDB_VAULTS_CACHE}
